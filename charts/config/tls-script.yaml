apiVersion: v1
data:
  tls_generator.py: "from pprint import pprint\nfrom kubernetes import config, client\nimport
    logging\n\n#use the serviceAccount k8s gives to pods\nconfig.load_incluster_config()
    \nv1 = client.CoreV1Api()\nname = \"tls-certificate\"\nnamespace = \"default\"\nssl_cert
    = ''\nssl_key  = ''\n# check if gluu secret exists\ndef get_certs():\n    if (
    v1.read_namespaced_secret( 'gluu', 'default' ) ):\n        ssl_cert = v1.read_namespaced_secret(
    'gluu', 'default' ).data['ssl_cert']\n        ssl_key = v1.read_namespaced_secret(
    \"gluu\", \"default\" ).data['ssl_key']\n\n    return ssl_cert, ssl_key\n\n\ndef
    create_tls(cert, key):\n\n    v1 = client.CoreV1Api()\n    try:\n        secret
    = v1.read_namespaced_secret(name, namespace)\n    except client.rest.ApiException
    as e:\n        if e.status == 404:\n            print('secret/{} in ns/{} does
    not exist. Creating...'.format(\n                name, namespace))\n            metadata
    = {\n                'name': name,\n                'namespace': namespace\n            }\n
    \           data = {\n                'tls.crt': ssl_cert,\n                'tls.key'
    : ssl_key,\n            }\n            api_version = 'v1'\n            kind =
    'Secret'\n            body = client.V1Secret(api_version, data , kind, metadata,
    \n                type='kubernetes.io/tls')\n            api_response = v1.create_namespaced_secret(namespace,
    body )\n            pprint(api_response)\n        else:\n            logging.exception(e)\n
    \       return False\n    else:\n        print('tls-certificate already exists
    as /{}'. format(\n            secret\n        ))\n\n        \n\ndef main():\n
    \   cert, key = get_certs()\n    create_tls(cert, key)\n\nif __name__ == \"__main__\":\n
    \   main()"
kind: ConfigMap
metadata:
  creationTimestamp: "2019-08-22T08:05:59Z"
  name: {{ template "gluu.fullname" . }}-tls-script
